require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe InvitationsController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # Invitation. As you add validations to Invitation, be sure to
  # adjust the attributes here as well.
  login_user
  let(:event) { FactoryGirl.create(:event) }
  let(:invitation) { FactoryGirl.create(:invitation, event_id: event.id) }
  let(:valid_attributes) { FactoryGirl.attributes_for(:invitation, event_id: event.id) }
  let(:invalid_attributes) { { event_id: nil, email: nil} }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # InvitationsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all invitations as @invitations" do
      invitation
      get :index, { event_id: event.id }, valid_session
      expect(assigns(:invitations)).to eq([invitation])
    end
  end

  describe "GET show" do
    it "assigns the requested invitation as @invitation" do
      invitation
      get :show, { event_id: event.id, id: invitation.to_param }, valid_session
      expect(assigns(:invitation)).to eq(invitation)
    end
  end

  describe "GET new" do
    it "assigns a new invitation as @invitation" do
      get :new, { event_id: event.id }, valid_session
      expect(assigns(:invitation)).to be_a_new(Invitation)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      let(:valid_post_params) { {event_id: event.id, invitation: valid_attributes} }
      it "creates a new Invitation" do
        expect {
          post :create, valid_post_params, valid_session
        }.to change(Invitation, :count).by(1)
      end

      it "assigns a newly created invitation as @invitation" do
        post :create, valid_post_params, valid_session
        expect(assigns(:invitation)).to be_a(Invitation)
        expect(assigns(:invitation)).to be_persisted
      end

      it "redirects to the created invitation" do
        post :create, valid_post_params, valid_session
        expect(response).to redirect_to(event)
      end
    end

    describe "with invalid params" do
      let(:invalid_post_params) { {event_id: event.id, invitation: invalid_attributes} }
      it "assigns a newly created but unsaved invitation as @invitation" do
        post :create, invalid_post_params, valid_session
        expect(assigns(:invitation)).to be_a_new(Invitation)
      end

      it "re-renders the 'new' template" do
        post :create, invalid_post_params, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested invitation" do
      invitation
      expect {
        delete :destroy, {id: invitation.to_param, event_id: event.id}, valid_session
      }.to change(Invitation, :count).by(-1)
    end

    it "redirects to the invitations list" do
      invitation
      delete :destroy, {id: invitation.to_param, event_id: event.id}, valid_session
      expect(response).to redirect_to(event)
    end
  end

end
